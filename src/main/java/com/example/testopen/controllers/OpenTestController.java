package com.example.testopen.controllers;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import com.example.testopen.db.TemporaryMemory;
import com.example.testopen.entety.Answers;
import com.example.testopen.entety.Time;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.util.Duration;

public class OpenTestController {

    @FXML
    private Label TimeCh;
    @FXML
    private ResourceBundle resources;

    @FXML
    private URL location;

    @FXML
    private TextField AnswerFour;
    @FXML
    private TextField AnswerOne;

    @FXML
    private TextField AnswerThree;

    @FXML
    private TextField AnswerTwo;

    @FXML
    private RadioButton Four;

    @FXML
    private Button Next;

    @FXML
    private RadioButton One;

    @FXML
    private TextArea Quest;

    @FXML
    private RadioButton Three;

    @FXML
    private RadioButton Two;
    private int tmp = 0;
    private int countQ;
    Time time;


    @FXML
    void initialize() throws IOException {
        assert AnswerFour != null : "fx:id=\"AnswerFour\" was not injected: check your FXML file 'Untitled'.";
        assert AnswerOne != null : "fx:id=\"AnswerOne\" was not injected: check your FXML file 'Untitled'.";
        assert AnswerThree != null : "fx:id=\"AnswerThree\" was not injected: check your FXML file 'Untitled'.";
        assert AnswerTwo != null : "fx:id=\"AnswerTwo\" was not injected: check your FXML file 'Untitled'.";
        assert Four != null : "fx:id=\"Four\" was not injected: check your FXML file 'Untitled'.";
        assert Next != null : "fx:id=\"Next\" was not injected: check your FXML file 'Untitled'.";
        assert One != null : "fx:id=\"One\" was not injected: check your FXML file 'Untitled'.";
        assert Quest != null : "fx:id=\"Quest\" was not injected: check your FXML file 'Untitled'.";
        assert Three != null : "fx:id=\"Three\" was not injected: check your FXML file 'Untitled'.";
        assert Two != null : "fx:id=\"Two\" was not injected: check your FXML file 'Untitled'.";

        ObjectMapper objectMapper = new ObjectMapper();
        setNull();
        Quest.setEditable(false);
        AnswerOne.setEditable(false);
        AnswerTwo.setEditable(false);
        AnswerThree.setEditable(false);
        AnswerFour.setEditable(false);
        TimeCh.setText(String.valueOf(TemporaryMemory.test.getTime()));
        countQ = TemporaryMemory.test.getQuest().size();
        setQuest(tmp);
        //
        time = new Time(Integer.parseInt(TemporaryMemory.test.getTime()));
        Timeline timeline = new Timeline(
                new KeyFrame(Duration.seconds(1),
                        e -> {
                            if (time.getCurrentTime().equals("0:0")) {
                                try {
                                    TemporaryMemory.network.sendMessage(objectMapper.writeValueAsString(TemporaryMemory.answers));
                                } catch (JsonProcessingException ex) {
                                    throw new RuntimeException(ex);
                                }
                                Stage stage = (Stage) Next.getScene().getWindow();
                                stage.close();
                            }
                            time.oneSecondPassed();
                            TimeCh.setText(time.getCurrentTime());
                        }));
        TimeCh.setText(time.getCurrentTime());
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();
        Next.setOnAction(actionEvent -> {
            if (!(One.isSelected() || Two.isSelected() || Three.isSelected() || Four.isSelected()))
                OtherController.generateAlert("Не выбран не один вариант ответа", Alert.AlertType.WARNING);
            else {
                tmp++;
                TemporaryMemory.answers.add(getAnswerIndex());
                if (countQ != tmp) {
                    setNull();
                    setQuest(tmp);
                } else {
                    try {
                        TemporaryMemory.network.sendMessage(objectMapper.writeValueAsString(TemporaryMemory.answers));
                    } catch (JsonProcessingException e) {
                        throw new RuntimeException(e);
                    }
                    timeline.stop();
                    ((Stage)(((Button)actionEvent.getSource()).getScene().getWindow())).close();
                }
            }


        });

    }


    private Answers getAnswerIndex() {
        List<Integer> tmp = new ArrayList<>();
        if (One.isSelected()) {
            tmp.add(0);
        }
        if (Two.isSelected()) {
            tmp.add(1);
        }
        if (Three.isSelected()) {
            tmp.add(2);
        }
        if (Four.isSelected()) {
            tmp.add(3);
        }
        return new Answers(tmp);
    }

    private void setNull() {
        One.setSelected(false);
        Two.setSelected(false);
        Three.setSelected(false);
        Four.setSelected(false);
        Quest.setText("");
        AnswerOne.setText("");
        AnswerTwo.setText("");
        AnswerThree.setText("");
        AnswerFour.setText("");
    }

    private void setQuest(int count) {
        Quest.setText(TemporaryMemory.test.getQuest().get(count).getQuest());
        AnswerOne.setText(TemporaryMemory.test.getQuest().get(count).getAnswer().get(0).answer());
        AnswerTwo.setText(TemporaryMemory.test.getQuest().get(count).getAnswer().get(1).answer());
        AnswerThree.setText(TemporaryMemory.test.getQuest().get(count).getAnswer().get(2).answer());
        AnswerFour.setText(TemporaryMemory.test.getQuest().get(count).getAnswer().get(3).answer());

    }
}



